name: Build MRDOOM App

on:
  push:
    branches: [ production ]
  pull_request:
    branches: [ production ]
  workflow_dispatch:

permissions:
  contents: write

jobs:
  build-all:
    strategy:
      fail-fast: false
      matrix:
        platform: [ubuntu-22.04, macos-latest, windows-latest]
        include:
          - platform: ubuntu-22.04
            node-download: "https://nodejs.org/dist/v18.17.1/node-v18.17.1-linux-x64.tar.gz"
            artifact-name: linux-build
          - platform: macos-latest
            node-download: "https://nodejs.org/dist/v18.17.1/node-v18.17.1-darwin-x64.tar.gz"
            artifact-name: macos-build
          - platform: windows-latest
            node-download: "https://nodejs.org/dist/v18.17.1/node-v18.17.1-win-x64.zip"
            artifact-name: windows-build

    runs-on: ${{ matrix.platform }}
    steps:
      - uses: actions/checkout@v3

      - name: Install Linux dependencies
        if: matrix.platform == 'ubuntu-22.04'
        run: |
          sudo apt-get update
          sudo apt-get install -y libsoup-3.0-dev libgtk-3-dev libwebkit2gtk-4.1-dev libjavascriptcoregtk-4.1-dev libappindicator3-dev librsvg2-dev patchelf

      - name: Set pkg-config override
        if: matrix.platform == 'ubuntu-22.04'
        run: |
          echo "PKG_CONFIG_ALLOW_SYSTEM_CFLAGS=1" >> $GITHUB_ENV
          echo "PKG_CONFIG_ALLOW_SYSTEM_LIBS=1" >> $GITHUB_ENV

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'pnpm'

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Install dependencies
        run: pnpm install

      - name: Build frontend
        run: pnpm run build

      - name: Setup Node.js binary
        shell: bash
        run: |
          mkdir -p src-tauri/resources

          if [[ "${{ matrix.platform }}" == "windows-latest" ]]; then
            curl -LO "${{ matrix.node-download }}"
            powershell -Command "Expand-Archive -Path \"*.zip\" -DestinationPath \".\""
            powershell -Command \"Move-Item -Path 'node-v18.17.1-win-x64\\node.exe' -Destination 'src-tauri\\resources\\node.exe'\"
          else
            curl -L "${{ matrix.node-download }}" -o node.tar.gz
            tar -xzf node.tar.gz
            mv node-v18.17.1-*/bin/node src-tauri/resources/node
            chmod +x src-tauri/resources/node
          fi

      - name: Prepare server components
        shell: bash
        run: |
          mkdir -p src-tauri/resources/app

          # Copy and install server files
          cp server/server-package.json dist/package.json
          npm install --omit=dev --prefix=dist

          # Validate outputs
          test -f dist/index.cjs || (echo "❌ index.cjs missing" && exit 1)
          test -d dist/public || (echo "❌ public folder missing" && exit 1)
          test -d dist/node_modules || (echo "❌ node_modules missing" && exit 1)

          # Copy required assets
          cp dist/index.cjs src-tauri/resources/app/
          cp -r shared src-tauri/resources/app/shared
          cp -r dist/public src-tauri/resources/app/public
          ls -lah dist/node_modules
          cp -r dist/node_modules src-tauri/resources/app/node_modules

      - name: Check final app bundle structure
        run: |
          echo "Contents of app resources:"
          ls -R src-tauri/resources/app

      - uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NODE_ENV: production
        with:
          tagName: app-v__VERSION__
          releaseName: 'App v__VERSION__'
          releaseBody: 'See the assets to download this version and install.'
          releaseDraft: true
          prerelease: false

      - name: Upload artifacts
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact-name }}
          path: src-tauri/target/release/bundle/
